{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z.]{1,})?$');\nfunction isIP(ipAddress) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(ipAddress);\n\n  // accessing 'arguments' for backwards compatibility: isIP(ipAddress [, version])\n  // eslint-disable-next-line prefer-rest-params\n  var version = (_typeof(options) === 'object' ? options.version : arguments[1]) || '';\n  if (!version) {\n    return isIP(ipAddress, {\n      version: 4\n    }) || isIP(ipAddress, {\n      version: 6\n    });\n  }\n  if (version.toString() === '4') {\n    return IPv4AddressRegExp.test(ipAddress);\n  }\n  if (version.toString() === '6') {\n    return IPv6AddressRegExp.test(ipAddress);\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isIP","_assertString","_interopRequireDefault","require","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","IPv4SegmentFormat","IPv4AddressFormat","concat","IPv4AddressRegExp","RegExp","IPv6SegmentFormat","IPv6AddressRegExp","ipAddress","options","arguments","length","undefined","version","toString","test","module"],"sources":["C:/Users/HP/Desktop/My Website/developer-portfolio-master/node_modules/validator/lib/isIP.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z.]{1,})?$');\nfunction isIP(ipAddress) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(ipAddress);\n\n  // accessing 'arguments' for backwards compatibility: isIP(ipAddress [, version])\n  // eslint-disable-next-line prefer-rest-params\n  var version = (_typeof(options) === 'object' ? options.version : arguments[1]) || '';\n  if (!version) {\n    return isIP(ipAddress, {\n      version: 4\n    }) || isIP(ipAddress, {\n      version: 6\n    });\n  }\n  if (version.toString() === '4') {\n    return IPv4AddressRegExp.test(ipAddress);\n  }\n  if (version.toString() === '6') {\n    return IPv6AddressRegExp.test(ipAddress);\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}